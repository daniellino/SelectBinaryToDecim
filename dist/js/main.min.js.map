{"version":3,"sources":["main.js"],"names":["deciToBinary","popNumArr","resetWholeGeneration","window","location","reload","decimVal","document","getElementById","addUpresult","floor","Math","random","deimalVlaue","finalChosenDigits","givenAnsAddUp","takeNum","clickedObjectContainer","k","populateAnsComb","concat","numbersDigitLimitAndReset","alert","length","agregate","t","timerNum","innerHTML","clearInterval","querySelector","style","display","runToCheck","toString","allglued","join","body","backgroundColor","resultAns","myFunctionCorrect","undefined","dec2bin","givenAns","dec","myFunctionFalse"],"mappings":"aACA,IAKIA,aAFEC,uBAHAC,qBAAuB,WAD7BC,OAAAC,SAAAC,UAEEF,UAAgBE,GADlBC,SAAA,EAIIA,SAAWC,SAAfC,eAAA,WACIR,YAAJ,EAGAM,SAAIG,KAAWC,MAEf,IAAAC,KAAAC,UAEA,IAAIC,YAAcN,SAASC,eAAe,iBAD1CF,YAAWK,UAAWA,SAEtBE,IAAAA,cAAA,WAGE,IAAIC,EAAoB,GADpBC,EAAAA,uBAAAA,YACJC,EAAIF,SAAAA,GACJb,UAAIe,KAAUC,GACdD,aAAAA,EACAf,kBACAQ,IAAAA,IAAAA,EAAW,EAAGA,EAAAA,UAAcO,OAA5BE,IACAC,EAAeL,EAAAM,OAAAnB,UAAAiB,KAGdG,0BAAA,WATHC,MAAA,6BAcEpB,wBADAoB,gBAAK,WADP,IAEEpB,IAAAA,EAAAA,GAFFgB,EAAA,EAAAA,EAAAjB,UAAAsB,OAAAL,IAKE,GAEEM,EAAWA,EAASJ,OAAOnB,UAAUiB,IAHnCC,SAAAA,UAAkBK,EACtB,EAAIA,UAAWD,OAKX,OAAOF,6BADTI,EAAIxB,EACFyB,SAAOL,YAAAA,WAEVI,EAAA,IARHA,IAUAlB,SAAAC,eAAA,eAAAmB,UAAAF,IAQIG,cAAcF,UAEdnB,SAASC,eAAe,eAAemB,UAAY,cARnDD,SAAQG,cAAe,iBAAMC,MAAAC,QAAA,OAC/BxB,SAAAC,eAAA,UAAAsB,MAAAC,QAAA,UAEEN,KAaEO,WAAa,WARfzB,SAAAA,eAASC,eAATmB,UAAAF,EACAlB,cAASsB,UAcX7B,aAAuBM,SAvBzB2B,SAAA,GAgBAjC,aAAmB,WAAbgC,OAAAA,aAAmBT,QAAAvB,aACvBO,IAAAA,EAASC,SAAeA,eAAemB,cAgBnCO,EAAWjC,UAAUkC,KAAK,IAV9BnC,EAAuBM,WACvBN,EAAY2B,UAAG,SAabpB,SAAS6B,KAAKN,MAAMO,gBAAkB,UAZxCC,EAAIA,MAAY/B,MAASC,UAGvB8B,SAAUX,UAFW,IAAjBY,YAEJD,sBAAAA,OAAAtC,aAAAsC,qCAgBE,wBAAAlB,OAA4CpB,aAA5C,wBAAAoB,OAA6Ec,EAA7E,QAX0BM,MAA1BN,wBAGFI,eAAAJ,GAjBFI,EAAaX,UAAPc,WACJlC,SAAA6B,KAAAN,MAAAO,gBAAA,UACAK,SAAOC,MAAIV,MAAX,WAoBEW","file":"main.min.js","sourcesContent":["// import populateAnsComb from \"./populate\";\r\nconst resetWholeGeneration = () => {\r\n  window.location.reload();\r\n};\r\nconst popNumArr = [];\r\nlet decimVal = 0;\r\nlet deciToBinary;\r\nlet clickedObjectContainer;\r\nlet givenAns = document.getElementById(\"combAns\");\r\nlet addUpresult = 0;\r\n\r\n//creating random decimal octet\r\ndecimVal = Math.floor(Math.random() * 256);\r\nlet deimalVlaue = document.getElementById(\"decimal-Value\");\r\ndeimalVlaue.innerHTML = decimVal;\r\n\r\nconst givenAnsAddUp = () => {\r\n  let finalChosenDigits = \"\";\r\n  let takeNum = clickedObjectContainer.textContent;\r\n  takeNum = parseInt(takeNum);\r\n  popNumArr.push(takeNum);\r\n  addUpresult = addUpresult + takeNum;\r\n  populateAnsComb();\r\n  for (let k = 0; k < popNumArr.length; k++) {\r\n    finalChosenDigits = finalChosenDigits.concat(popNumArr[k]);\r\n  }\r\n};\r\n\r\nconst numbersDigitLimitAndReset = () => {\r\n  alert(`Only 8 digits are allowed`);\r\n  resetWholeGeneration(); //rest the quiz after entering more than 8 digit\r\n};\r\nconst populateAnsComb = () => {\r\n  let agregate = \"\";\r\n  for (let k = 0; k < popNumArr.length; k++) {\r\n    agregate = agregate.concat(popNumArr[k]);\r\n    givenAns.innerHTML = agregate;\r\n    if (popNumArr.length > 8) {\r\n      return numbersDigitLimitAndReset(); //calling function for preventing user to enter more than 8 digits\r\n    }\r\n  }\r\n};\r\n/*******************timer*********************** */\r\nlet t = 0; //timer counter\r\nlet timerNum = setInterval(() => {\r\n  //function for counting up to 30 seconds\r\n  if (t < 30) {\r\n    t++;\r\n    document.getElementById(\"timer-value\").innerHTML = t;\r\n  } else {\r\n    clearInterval(timerNum);\r\n    // console.log(`done!!`);\r\n    document.getElementById(\"timer-value\").innerHTML = \"Time is up!\";\r\n    document.querySelector(\".timer-wraper\").style.display = \"none\";\r\n    document.getElementById(\"timeUp\").style.display = \"block\";\r\n  }\r\n}, 1000);\r\n\r\n/*******************timer*********************** */\r\n\r\nconst runToCheck = () => {\r\n  document.getElementById(\"timer-value\").innerHTML = t;\r\n  clearInterval(timerNum); //capturing the latest elapsed time\r\n  const dec2bin = (dec) => {\r\n    //function for converting decimal number to binary equivalent\r\n    return dec.toString(2);\r\n  }; //doesnt show leading zeros\r\n  deciToBinary = dec2bin(decimVal); //converting the random generated decimal to binary\r\n  deciToBinary = \"00000000\".substr(deciToBinary.length) + deciToBinary; //adding leading zeros\r\n  let resultAns = document.getElementById(\"matchField\"); //capturing the Correct or false answer HTML field\r\n  const myFunctionCorrect = () => {\r\n    //function to be called if the answer is correct\r\n    resultAns.innerHTML = \"Correct!\";\r\n    document.body.style.backgroundColor = \"#96E29A\"; //color feedback correct\r\n    givenAns.style.color = \"#22E02D\";\r\n  };\r\n\r\n  let allglued = popNumArr.join(\"\"); //combining the popNumArr items as one byte of binary number\r\n  const myFunctionFalse = () => {\r\n    //function to be called if the answer is False\r\n    resultAns.innerHTML = \"False!\";\r\n    document.body.style.backgroundColor = \"#FF5760\"; //color feedback correct\r\n    resultAns.style.color = \"#FF0000\";\r\n\r\n    if (addUpresult == \"\") {\r\n      //feedback for false answer\r\n      givenAns.innerHTML = `Correct answer is: ${deciToBinary}, and you didn't choose an option`;\r\n    } else {\r\n      givenAns.innerHTML = `Correct answer is: \"${deciToBinary}\", but You Chose \"${allglued}\"!`;\r\n    }\r\n  };\r\n\r\n  if (clickedObjectContainer != undefined) {\r\n    //Main checking the answer\r\n\r\n    console.log(deciToBinary);\r\n    if (deciToBinary === allglued) {\r\n      myFunctionCorrect();\r\n    } else {\r\n      myFunctionFalse();\r\n    }\r\n  } else {\r\n    myFunctionFalse();\r\n  }\r\n};\r\n"]}