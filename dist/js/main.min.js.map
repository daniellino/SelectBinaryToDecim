{"version":3,"sources":["main.js"],"names":["deciToBinary","popNumArr","resetWholeGeneration","window","location","reload","decimVal","document","getElementById","addUpresult","floor","Math","random","deimalVlaue","alert","agregate","k","length","populateAnsComb","concat","givenAns","numbersDigitLimitAndReset","givenAnsAddUp","finalChosenDigits","takeNum","clickedObjectContainer","textContent","parseInt","push","timerNum","setInterval","t","innerHTML","clearInterval","querySelector","style","display","toString","substr","runToCheck","allglued","join","myFunctionFalse","resultAns","backgroundColor","color","undefined","body"],"mappings":"aAAA,IAKIA,aAFEC,uBAHAC,qBAAuB,WAC3BC,OAAOC,SAASC,UAAhBF,UAAgBE,GADlBC,SAAA,EAIIA,SAAWC,SAAfC,eAAA,WACIR,YAAJ,EAGAM,SAAIG,KAAWC,MAEf,IAAAC,KAAAC,UAEA,IAAIC,YAAcN,SAASC,eAAe,iBAD1CF,YAAWK,UAAWA,SAEtBE,IAAAA,0BAAA,WAGEC,MAAK,6BADPZ,wBAEEA,gBAAoB,WAIpB,IANF,IAAAa,EAAA,GAMWC,EAAI,EAAGA,EAAIf,UAAUgB,OAAQD,IAGpC,GALEE,EAAAA,EAAkBC,OAAlBD,UAAAA,IACJE,SAAIL,UAAJA,EAIyB,EAAnBd,UAAUgB,OAHhB,OAAUI,6BAGRC,cAAcL,WACZ,IAAAM,EAAOF,GACRG,EAAAC,uBAAAC,YACFF,EAAAG,SAAAH,GARHvB,UAAA2B,KAAAJ,GAeEf,aAA4Be,EAL9BN,kBACE,IAAIK,IAAAA,EAAAA,EAAAA,EAAAA,UAAJN,OAAAD,IACAO,EAAcE,EAAuBC,OAAAA,UAArCV,KAIAE,EAAAA,EAOEW,SAAWC,YAAY,WALvBP,EAAAA,IACDQ,IATHxB,SAAAC,eAAA,eAAAwB,UAAAD,IAmBIE,cAAcJ,UAPdE,SAAOvB,eAAA,eAAAwB,UAAA,cAUPzB,SAAS2B,cAAc,iBAAiBC,MAAMC,QAAU,OATxDP,SAAQrB,eAAe,UAAA2B,MAAMC,QAAA,UAE/B,KAIEH,WAAcJ,WAWhBtB,SAASC,eAAe,eAAewB,UAAYD,EATjDxB,cAASC,UAMbR,aAAAM,SAHG+B,SAAA,GAaDrC,aAAe,WAAWsC,OAAOtC,aAAaiB,QAAUjB,aAR1D,IAAMuC,EAAahC,SAAbgC,eAAmB,cAiBnBC,EAAWvC,UAAUwC,KAAK,IACxBC,EAAkB,WAEtBC,EAAUX,UAAY,SAZxBhC,SAAAA,KAAemC,MAAAS,gBAAkB5C,UAc/B2C,EAAUR,MAAMU,MAAQ,UAXxBzB,SAAAY,UAamB,IAAfvB,YAbJ,sBAAAU,OAAAnB,aAAA,qCAEAO,wBAAAA,OAAsCP,aAAtCO,wBAAAA,OAAiDiC,EAAjDjC,QAmB4BuC,MAA1BrB,wBAbFzB,eAAAwC,GAPAG,EAAUX,UAAY,WATxBzB,SAAawC,KAAGZ,MAAAS,gBAAS,UACvBxB,SAAAe,MAAAU,MAAA,WAoBAH","file":"main.min.js","sourcesContent":["const resetWholeGeneration = () => {\r\n  window.location.reload();\r\n};\r\nconst popNumArr = [];\r\nlet decimVal = 0;\r\nlet deciToBinary;\r\nlet clickedObjectContainer;\r\nlet givenAns = document.getElementById(\"combAns\");\r\nlet addUpresult = 0;\r\n\r\n//creating random decimal octet\r\ndecimVal = Math.floor(Math.random() * 256);\r\nlet deimalVlaue = document.getElementById(\"decimal-Value\");\r\ndeimalVlaue.innerHTML = decimVal;\r\n\r\nconst numbersDigitLimitAndReset = () => {\r\n  alert(`Only 8 digits are allowed`);\r\n  resetWholeGeneration();\r\n};\r\nconst populateAnsComb = () => {\r\n  let agregate = \"\";\r\n  for (let k = 0; k < popNumArr.length; k++) {\r\n    agregate = agregate.concat(popNumArr[k]);\r\n    givenAns.innerHTML = agregate;\r\n    if (popNumArr.length > 8) {\r\n      return numbersDigitLimitAndReset();\r\n    }\r\n  }\r\n};\r\nconst givenAnsAddUp = () => {\r\n  let finalChosenDigits = \"\";\r\n  let takeNum = clickedObjectContainer.textContent;\r\n  takeNum = parseInt(takeNum);\r\n  popNumArr.push(takeNum);\r\n  addUpresult = addUpresult + takeNum;\r\n  populateAnsComb();\r\n  for (let k = 0; k < popNumArr.length; k++) {\r\n    finalChosenDigits = finalChosenDigits.concat(popNumArr[k]);\r\n  }\r\n};\r\n/*******************timer*********************** */\r\nlet t = 0; //timer counter\r\nlet timerNum = setInterval(() => {\r\n  //function for counting up to 30 seconds\r\n  if (t < 30) {\r\n    t++;\r\n    document.getElementById(\"timer-value\").innerHTML = t;\r\n  } else {\r\n    clearInterval(timerNum);\r\n    // console.log(`done!!`);\r\n    document.getElementById(\"timer-value\").innerHTML = \"Time is up!\";\r\n    document.querySelector(\".timer-wraper\").style.display = \"none\";\r\n    document.getElementById(\"timeUp\").style.display = \"block\";\r\n  }\r\n}, 1000);\r\n\r\n/*******************timer*********************** */\r\n\r\nconst runToCheck = () => {\r\n  document.getElementById(\"timer-value\").innerHTML = t;\r\n  clearInterval(timerNum); //capturing the latest elapsed time\r\n  const dec2bin = (dec) => {\r\n    //function for converting decimal number to binary equivalent\r\n    return dec.toString(2);\r\n  }; //doesnt show leading zeros\r\n  deciToBinary = dec2bin(decimVal); //converting the random generated decimal to binary\r\n  deciToBinary = \"00000000\".substr(deciToBinary.length) + deciToBinary; //adding leading zeros\r\n  let resultAns = document.getElementById(\"matchField\"); //capturing the Correct or false answer HTML field\r\n  const myFunctionCorrect = () => {\r\n    //function to be called if the answer is correct\r\n    resultAns.innerHTML = \"Correct!\";\r\n    document.body.style.backgroundColor = \"#96E29A\"; //color feedback correct\r\n    givenAns.style.color = \"#22E02D\";\r\n  };\r\n\r\n  let allglued = popNumArr.join(\"\"); //combining the popNumArr items as one byte of binary number\r\n  const myFunctionFalse = () => {\r\n    //function to be called if the answer is False\r\n    resultAns.innerHTML = \"False!\";\r\n    document.body.style.backgroundColor = \"#FF5760\"; //color feedback correct\r\n    resultAns.style.color = \"#FF0000\";\r\n\r\n    if (addUpresult == \"\") {\r\n      //feedback for false answer\r\n      givenAns.innerHTML = `Correct answer is: ${deciToBinary}, and you didn't choose an option`;\r\n    } else {\r\n      givenAns.innerHTML = `Correct answer is: \"${deciToBinary}\", but You Chose \"${allglued}\"!`;\r\n    }\r\n  };\r\n\r\n  if (clickedObjectContainer != undefined) {\r\n    //Main checking the answer\r\n\r\n    console.log(deciToBinary);\r\n    if (deciToBinary === allglued) {\r\n      myFunctionCorrect();\r\n    } else {\r\n      myFunctionFalse();\r\n    }\r\n  } else {\r\n    myFunctionFalse();\r\n  }\r\n};\r\n"]}