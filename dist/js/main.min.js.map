{"version":3,"sources":["main.js"],"names":["deciToBinary","popNumArr","resetWholeGeneration","window","location","reload","decimVal","getElementById","clickedObjectContainer","addUpresult","floor","Math","random","deimalVlaue","document","numbersDigitLimitAndReset","alert","populateAnsComb","agregate","k","length","concat","givenAns","innerHTML","givenAnsAddUp","finalChosenDigits","takeNum","textContent","parseInt","t","printSec","clearInterval","timerNum","querySelector","style","display","runToCheck","toString","substr","resultAns","allglued","join","myFunctionCorrect","backgroundColor","undefined","body","dec2bin","color","myFunctionFalse"],"mappings":"aAAA,IAKIA,aAFEC,uBAHAC,qBAAuB,WACzBC,OAAOC,SAASC,UAAhBF,UAAgBE,GADpBC,SAAA,EAKIN,SAAAA,SAAJO,eAAA,WACIC,YAAAA,EAGJF,SAAIG,KAAWC,MAAf,IAAAC,KAAAC,UAEA,IAAAC,YAAAC,SAAAP,eAAA,iBAaA,SAASQ,4BACLC,MAAK,6BACLd,uBAEJ,SAASe,kBACL,IADJ,IAAAC,EAASD,GACDC,EAAW,EAAfC,EAAAlB,UAAAmB,OAAAD,IAEID,GAAAA,EAAWA,EAASG,OAAOpB,UAAUkB,IADpCG,SAALC,UAAoBtB,EACWA,EAAnBA,UAAGiB,OACH,OAACK,4BAGR,SAAAC,gBACJ,IAAAC,EAAA,GACJC,EAAAlB,uBAAAmB,YAIGD,EAAUE,SAASF,GAHvBzB,UAASuB,KAAAA,GACLf,aAAAiB,EACAT,kBACAS,IAAO,IAAGE,EAAAA,EAAQT,EAACO,UAAnBN,OAAAD,IACAlB,EAAAwB,EAAAJ,OAAApB,UAAAkB,IA5BJN,YAAYU,UAAYjB,SA+BpB,IAAAuB,EAAK,EACDJ,SAAAA,YAAoBA,SAAAA,KAE3B,SAACK,WAMMD,EAAI,IALZA,IAOQf,SAASP,eAAe,eAAegB,UAAYM,IANnDE,cAARC,UAUQlB,SAASP,eAAe,eAAegB,UAAY,cAP3DT,SAAAmB,cAAoB,iBAAAC,MAAAC,QAAA,OACXrB,SAAOP,eAAA,UAAA2B,MAAAC,QAAA,SAahB,SAASC,aAFTpC,aAAAM,SAFK+B,SAAA,GAWDrC,aAAe,WAAWsC,OAAOtC,aAAaoB,QAAUpB,aACxD,IAAIuC,EAAYzB,SAASP,eAAe,cAQxC,IAAIiC,EAAWvC,UAAUwC,KAAK,IAR9B,SAAIF,IACJA,EAASG,UAAT,SACIH,SAAUhB,KAAAA,MAAYoB,gBAAtB,UACA7B,EAAcoB,MAAMS,MAAAA,UAEtBrB,SAAAC,UADyB,IAAfd,YACV,sBAAAY,OAAArB,aAAA,qCAeM,wBAAAqB,OAA4CrB,aAA5C,wBAAAqB,OAA6EmB,EAA7E,OATmBI,MAA3BpC,wBAmBQR,eAAiBwC,GArCzBD,EAAAhB,UAAA,WACAT,SAAA+B,KAAAX,MAAAS,gBAAA,UACArB,SAASwB,MAATC,MAAsB,WA0BjBC","file":"main.min.js","sourcesContent":["const resetWholeGeneration = () => {\r\n    window.location.reload();\r\n}\r\nconst popNumArr = [];\r\nlet decimVal = 0;\r\nlet deciToBinary;\r\nlet clickedObjectContainer;\r\n// let finalChosenDigits = '';\r\nlet givenAns = document.getElementById('combAns');\r\nlet addUpresult = 0;\r\n\r\n/****************************************************************** */\r\ndecimVal = Math.floor(Math.random() * 256);\r\nlet deimalVlaue = document.getElementById(\"decimal-Value\");\r\ndeimalVlaue.innerHTML = decimVal;\r\n/********************************************************************************** */\r\n\r\n\r\n// function incrementNum() {\r\n//     let mydat = new Date();\r\n//     document.getElementById('timer-value').innerHTML = mydat.toLocaleTimeString();\r\n\r\n// }\r\n\r\nfunction numbersDigitLimitAndReset() {\r\n    alert(`Only 8 digits are allowed`);\r\n    resetWholeGeneration();\r\n}\r\nfunction populateAnsComb() {\r\n    let agregate = '';\r\n    for (let k = 0; k < popNumArr.length; k++) {\r\n        agregate = agregate.concat(popNumArr[k]);\r\n        givenAns.innerHTML = agregate;\r\n        if (popNumArr.length > 8) {\r\n            return numbersDigitLimitAndReset();\r\n        }\r\n    }\r\n}\r\nfunction givenAnsAddUp() {\r\n    let finalChosenDigits = '';\r\n    let takeNum = clickedObjectContainer.textContent;\r\n    takeNum = parseInt(takeNum);\r\n    popNumArr.push(takeNum);\r\n    addUpresult = addUpresult + takeNum;\r\n    populateAnsComb();\r\n    for (let k = 0; k < popNumArr.length; k++) {\r\n        finalChosenDigits = finalChosenDigits.concat(popNumArr[k]);\r\n    }\r\n} //~~~~~~~~~End of Function givenAnsAddUp\r\n/*******************timer*********************** */\r\nlet t = 0\r\nlet timerNum = setInterval(printSec, 1000);\r\n// console.log(timerNum);\r\nfunction printSec() {\r\n    if (t < 30) {\r\n        t++;\r\n        document.getElementById('timer-value').innerHTML = t;\r\n    } else {\r\n        clearInterval(timerNum);\r\n        // console.log(`done!!`);\r\n        document.getElementById('timer-value').innerHTML = 'Time is up!';\r\n        document.querySelector(\".timer-wraper\").style.display = \"none\";\r\n        document.getElementById(\"timeUp\").style.display = \"block\";\r\n    }\r\n}\r\n/*******************timer*********************** */\r\n\r\nfunction runToCheck() {\r\n    // let hidTable = document.querySelector('.answersTable').style.display = 'none';\r\n    //~~~~~~~~~~~~~~~~function definition for correct\r\n    function dec2bin(dec) {\r\n        return (dec).toString(2);\r\n    }//doesnt show leadin zeros\r\n    deciToBinary = dec2bin(decimVal);\r\n    deciToBinary = \"00000000\".substr(deciToBinary.length) + deciToBinary;\r\n    let resultAns = document.getElementById('matchField');\r\n    function myFunctionCorrect() {\r\n        resultAns.innerHTML = 'Correct!';\r\n        document.body.style.backgroundColor = '#96E29A'; //color feedback correct\r\n        givenAns.style.color = '#22E02D';\r\n    } //end of function myFunctionCorrect\r\n\r\n    // console.log(popNumArr);\r\n    let allglued = popNumArr.join('');//combining the popNumArr items as one byte of binary number\r\n    // console.log(allglued);\r\n    //~~~~~~~~~~~~~~~~function definition for False\r\n    function myFunctionFalse() {\r\n        //injecting a class for changing the color of the FALSE text to red\r\n        resultAns.innerHTML = 'False!';\r\n        document.body.style.backgroundColor = '#FF5760'; //color feedback correct\r\n        resultAns.style.color = '#FF0000';\r\n\r\n        if (addUpresult == '') {\r\n            givenAns.innerHTML = `Correct answer is: ${deciToBinary}, and you didn't choose an option`\r\n        } else {\r\n            givenAns.innerHTML = `Correct answer is: \"${deciToBinary}\", but You Chose \"${allglued}\"!`;\r\n        }\r\n    }\r\n\r\n    //~~~~~~~~~~~~~~~~Main condition~~~~~~~~~~~~~////////////////////////////////\r\n    // let cmbAnsFieldContent = givenAns.innerText;\r\n    if (clickedObjectContainer != undefined) {\r\n        // console.log(`run to check!`);\r\n\r\n        console.log(deciToBinary);\r\n        if (deciToBinary === allglued) {\r\n            myFunctionCorrect();\r\n        } else {\r\n            myFunctionFalse();\r\n        }\r\n\r\n    } else {\r\n        myFunctionFalse();\r\n    }\r\n} //end of function runToCheck\r\n\r\n/*▐▐▐▐▐▐▐▐▐Assigning shuffled new array elements to HTML cells in the table▐▐▐▐▐▐▐▐▐▐▐*/\r\n"]}