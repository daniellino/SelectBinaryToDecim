{"version":3,"sources":["main.js"],"names":["deciToBinary","popNumArr","resetWholeGeneration","window","location","reload","decimVal","getElementById","clickedObjectContainer","addUpresult","floor","Math","random","deimalVlaue","document","innerHTML","numbersDigitLimitAndReset","alert","populateAnsComb","agregate","concat","k","givenAns","givenAnsAddUp","finalChosenDigits","takeNum","textContent","parseInt","push","t","timerNum","setInterval","length","printSec","clearInterval","querySelector","style","display","toString","substr","runToCheck","allglued","join","resultAns","body","backgroundColor","myFunctionCorrect","undefined","color"],"mappings":"aAAA,IAKIA,aAFEC,uBAHAC,qBAAuB,WAC3BC,OAAOC,SAASC,UAAhBF,UAAgBE,GADlBC,SAAA,EAKIN,SAAAA,SAAJO,eAAA,WACIC,YAAAA,EAGJF,SAAIG,KAAWC,MAAf,IAAAC,KAAAC,UAEA,IAAAC,YAAAC,SAAAP,eAAA,iBAGAM,YAAYE,UAAYT,SASxB,IAAMU,0BAA4B,WAAlCC,MAAMD,6BACJC,wBADFC,gBAAA,WAIA,IACE,IAAIC,EAAW,GADXD,EAAAA,EAAAA,EAAkBjB,UAAlBiB,OAAAA,IAEJ,GADAC,EAAYA,EAAZC,OAAAnB,UAAAoB,IAGEC,SAASP,UAAYI,EAFHlB,EAAfA,UAAWoB,OACdF,OAAQH,6BAGNO,cAAOP,WACR,IAAAQ,EAAA,GACFC,EAAAjB,uBAAAkB,YARHD,EAAAE,SAAAF,GAcExB,UAAU2B,KAAKH,GAJjBhB,aAAMc,EACJL,kBACA,IAAIO,IAAAA,EAAO,EAAGjB,EAAAA,UAAAA,OAAuBkB,IACrCD,EAAmBA,EAAnBL,OAAAnB,UAAAoB,KASEQ,EAAI,EALNC,SAAaC,YAAO9B,SAAU+B,KAE7B,SAAAC,WACAJ,EAAA,IAOCA,IANJf,SAAAP,eAAA,eAAAQ,UAAAc,IASIK,cAAcJ,UAPdA,SAAQvB,eAAe0B,eASgBlB,UAR3C,cASID,SAASqB,cAAc,iBAAiBC,MAAMC,QAAU,OAR5DvB,SAASmB,eAAW,UAAAG,MAAAC,QAAA,SAKhBH,IAAAA,WAAcJ,WAUhBhB,SAASP,eAAe,eAAeQ,UAAYc,EARjDf,cAASP,UAeXP,aAAuBM,SAXxBgC,SAAA,GAYCtC,aAAe,WAAWuC,OAAOvC,aAAagC,QAAUhC,aAT1D,IAAMwC,EAAa1B,SAAb0B,eAAmB,cAOpBC,EAAAxC,UAAAyC,KAAA,IACH1C,EAAuBM,WAEvBqC,EAAIA,UAAoB,SActB7B,SAAS8B,KAAKR,MAAMS,gBAAkB,UAbxCF,EAAMG,MAAAA,MAAoB,UAiBtBxB,SAASP,UAfX,IAAAD,YAeE,sBAAAM,OAA2CpB,aAA3C,qCAbD,wBAAAoB,OAAApB,aAAA,wBAAAoB,OAAAqB,EAAA,QAKHM,MAAAvC,wBAGEmC,eAAAF,GArBFP,EAAAA,UAFuB,WAGvBpB,SAAA8B,KAAAR,MAAAS,gBAAA,UACAvB,SAAAc,MAAAY,MAAA,WAwBI1B","file":"main.min.js","sourcesContent":["const resetWholeGeneration = () => {\r\n  window.location.reload();\r\n};\r\nconst popNumArr = [];\r\nlet decimVal = 0;\r\nlet deciToBinary;\r\nlet clickedObjectContainer;\r\n// let finalChosenDigits = '';\r\nlet givenAns = document.getElementById(\"combAns\");\r\nlet addUpresult = 0;\r\n\r\n/****************************************************************** */\r\ndecimVal = Math.floor(Math.random() * 256);\r\nlet deimalVlaue = document.getElementById(\"decimal-Value\");\r\ndeimalVlaue.innerHTML = decimVal;\r\n/********************************************************************************** */\r\n\r\n// function incrementNum() {\r\n//     let mydat = new Date();\r\n//     document.getElementById('timer-value').innerHTML = mydat.toLocaleTimeString();\r\n\r\n// }\r\n\r\nconst numbersDigitLimitAndReset = () => {\r\n  alert(`Only 8 digits are allowed`);\r\n  resetWholeGeneration();\r\n};\r\nconst populateAnsComb = () => {\r\n  let agregate = \"\";\r\n  for (let k = 0; k < popNumArr.length; k++) {\r\n    agregate = agregate.concat(popNumArr[k]);\r\n    givenAns.innerHTML = agregate;\r\n    if (popNumArr.length > 8) {\r\n      return numbersDigitLimitAndReset();\r\n    }\r\n  }\r\n};\r\nconst givenAnsAddUp = () => {\r\n  let finalChosenDigits = \"\";\r\n  let takeNum = clickedObjectContainer.textContent;\r\n  takeNum = parseInt(takeNum);\r\n  popNumArr.push(takeNum);\r\n  addUpresult = addUpresult + takeNum;\r\n  populateAnsComb();\r\n  for (let k = 0; k < popNumArr.length; k++) {\r\n    finalChosenDigits = finalChosenDigits.concat(popNumArr[k]);\r\n  }\r\n}; //~~~~~~~~~End of Function givenAnsAddUp\r\n/*******************timer*********************** */\r\nlet t = 0;\r\nlet timerNum = setInterval(printSec, 1000);\r\n// console.log(timerNum);\r\nfunction printSec() {\r\n  if (t < 30) {\r\n    t++;\r\n    document.getElementById(\"timer-value\").innerHTML = t;\r\n  } else {\r\n    clearInterval(timerNum);\r\n    // console.log(`done!!`);\r\n    document.getElementById(\"timer-value\").innerHTML = \"Time is up!\";\r\n    document.querySelector(\".timer-wraper\").style.display = \"none\";\r\n    document.getElementById(\"timeUp\").style.display = \"block\";\r\n  }\r\n}\r\n/*******************timer*********************** */\r\n\r\nconst runToCheck = () => {\r\n  document.getElementById(\"timer-value\").innerHTML = t;\r\n  clearInterval(timerNum); //capturing the latest elapsed time\r\n  // let hidTable = document.querySelector('.answersTable').style.display = 'none';\r\n  //~~~~~~~~~~~~~~~~function definition for correct\r\n  const dec2bin = (dec) => {\r\n    return dec.toString(2);\r\n  }; //doesnt show leadin zeros\r\n  deciToBinary = dec2bin(decimVal);\r\n  deciToBinary = \"00000000\".substr(deciToBinary.length) + deciToBinary;\r\n  let resultAns = document.getElementById(\"matchField\");\r\n  const myFunctionCorrect = () => {\r\n    resultAns.innerHTML = \"Correct!\";\r\n    document.body.style.backgroundColor = \"#96E29A\"; //color feedback correct\r\n    givenAns.style.color = \"#22E02D\";\r\n  }; //end of function myFunctionCorrect\r\n\r\n  // console.log(popNumArr);\r\n  let allglued = popNumArr.join(\"\"); //combining the popNumArr items as one byte of binary number\r\n  // console.log(allglued);\r\n  //~~~~~~~~~~~~~~~~function definition for False\r\n  const myFunctionFalse = () => {\r\n    //injecting a class for changing the color of the FALSE text to red\r\n    resultAns.innerHTML = \"False!\";\r\n    document.body.style.backgroundColor = \"#FF5760\"; //color feedback correct\r\n    resultAns.style.color = \"#FF0000\";\r\n\r\n    if (addUpresult == \"\") {\r\n      givenAns.innerHTML = `Correct answer is: ${deciToBinary}, and you didn't choose an option`;\r\n    } else {\r\n      givenAns.innerHTML = `Correct answer is: \"${deciToBinary}\", but You Chose \"${allglued}\"!`;\r\n    }\r\n  };\r\n\r\n  //~~~~~~~~~~~~~~~~Main condition~~~~~~~~~~~~~////////////////////////////////\r\n  // let cmbAnsFieldContent = givenAns.innerText;\r\n  if (clickedObjectContainer != undefined) {\r\n    // console.log(`run to check!`);\r\n\r\n    console.log(deciToBinary);\r\n    if (deciToBinary === allglued) {\r\n      myFunctionCorrect();\r\n    } else {\r\n      myFunctionFalse();\r\n    }\r\n  } else {\r\n    myFunctionFalse();\r\n  }\r\n}; //end of function runToCheck\r\n\r\n/*▐▐▐▐▐▐▐▐▐Assigning shuffled new array elements to HTML cells in the table▐▐▐▐▐▐▐▐▐▐▐*/\r\n"]}